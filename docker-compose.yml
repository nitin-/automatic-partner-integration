services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: lender_framework_postgres
    environment:
      POSTGRES_DB: lender_framework
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - lender_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d lender_framework"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: lender_framework_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - lender_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # FastAPI Backend
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: lender_framework_backend
    environment:
      - DATABASE_URL=postgresql+asyncpg://postgres:password@postgres:5432/lender_framework
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/1
      - CELERY_RESULT_BACKEND=redis://redis:6379/1
      - DEBUG=true
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app
      - ./generated_apis:/app/generated_apis
      - ./api_templates:/app/api_templates
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - lender_network
    command: >
      sh -c "alembic upgrade head &&
             uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload"

  # Celery Worker
  celery_worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: lender_framework_celery_worker
    environment:
      - DATABASE_URL=postgresql+asyncpg://postgres:password@postgres:5432/lender_framework
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/1
      - CELERY_RESULT_BACKEND=redis://redis:6379/1
    volumes:
      - ./backend:/app
      - ./generated_apis:/app/generated_apis
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - lender_network
    command: celery -A app.core.celery worker --loglevel=info

  # Celery Flower (Monitoring)
  flower:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: lender_framework_flower
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/1
      - CELERY_RESULT_BACKEND=redis://redis:6379/1
    ports:
      - "5555:5555"
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - lender_network
    command: celery -A app.core.celery flower --port=5555

  # React Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: lender_framework_frontend
    ports:
      - "3000:3000"
    environment:
      - REACT_APP_API_URL=http://localhost:8000
    depends_on:
      - backend
    networks:
      - lender_network
    volumes:
      - ./frontend:/app
      - /app/node_modules

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: lender_framework_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - backend
      - frontend
    networks:
      - lender_network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  lender_network:
    driver: bridge
